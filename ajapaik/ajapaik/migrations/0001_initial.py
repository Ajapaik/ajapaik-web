# Generated by Django 2.2.17 on 2020-12-11 12:21

import datetime
from django.conf import settings
import django.contrib.gis.db.models.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_extensions.db.fields.json


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ('django_comments_xtd', '0006_auto_20181204_0948'),
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Action',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=255)),
                ('related_id', models.PositiveIntegerField(blank=True, null=True)),
                ('params', django_extensions.db.fields.json.JSONField(blank=True, default=dict, null=True)),
            ],
            options={
                'db_table': 'project_action',
            },
        ),
        migrations.CreateModel(
            name='Album',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=255, verbose_name='Name')),
                ('name_et', models.CharField(db_index=True, max_length=255, null=True, verbose_name='Name')),
                ('name_lv', models.CharField(db_index=True, max_length=255, null=True, verbose_name='Name')),
                ('name_lt', models.CharField(db_index=True, max_length=255, null=True, verbose_name='Name')),
                ('name_en', models.CharField(db_index=True, max_length=255, null=True, verbose_name='Name')),
                ('name_ru', models.CharField(db_index=True, max_length=255, null=True, verbose_name='Name')),
                ('name_fi', models.CharField(db_index=True, max_length=255, null=True, verbose_name='Name')),
                ('name_sv', models.CharField(db_index=True, max_length=255, null=True, verbose_name='Name')),
                ('name_nl', models.CharField(db_index=True, max_length=255, null=True, verbose_name='Name')),
                ('name_de', models.CharField(db_index=True, max_length=255, null=True, verbose_name='Name')),
                ('name_no', models.CharField(db_index=True, max_length=255, null=True, verbose_name='Name')),
                ('slug', models.SlugField(blank=True, max_length=255, null=True)),
                ('description', models.TextField(blank=True, max_length=2047, null=True, verbose_name='Description')),
                ('atype', models.PositiveSmallIntegerField(
                    choices=[(0, 'Curated'), (1, 'Favorites'), (2, 'Auto'), (3, 'Person'), (4, 'Collection')])),
                ('is_public', models.BooleanField(default=True, verbose_name='Is public')),
                ('open', models.BooleanField(default=False, verbose_name='Is open')),
                ('ordered', models.BooleanField(default=False)),
                ('lat', models.FloatField(blank=True, db_index=True, null=True)),
                ('lon', models.FloatField(blank=True, db_index=True, null=True)),
                ('geography',
                 django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, null=True, srid=4326)),
                ('cover_photo_flipped', models.BooleanField(default=False)),
                ('photo_count_with_subalbums', models.IntegerField(default=0)),
                ('rephoto_count_with_subalbums', models.IntegerField(default=0)),
                ('geotagged_photo_count_with_subalbums', models.IntegerField(default=0)),
                ('comments_count_with_subalbums', models.IntegerField(default=0)),
                ('is_film_still_album', models.BooleanField(default=False)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('gender', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Male'), (0, 'Female')], null=True,
                                                            verbose_name='Gender')),
                ('is_public_figure', models.BooleanField(default=False)),
                ('wikidata_qid',
                 models.CharField(blank=True, max_length=255, null=True, verbose_name='Wikidata identifier')),
                ('face_encodings', models.TextField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('similar_photo_count_with_subalbums', models.IntegerField(default=0)),
                ('confirmed_similar_photo_count_with_subalbums', models.IntegerField(default=0)),
            ],
            options={
                'db_table': 'project_album',
            },
        ),
        migrations.CreateModel(
            name='AlbumPhoto',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.PositiveSmallIntegerField(
                    choices=[(0, 'Curated'), (1, 'Re-curated'), (2, 'Manual'), (3, 'Still'), (4, 'Uploaded'),
                             (5, 'Face tagged'), (6, 'Collection')], db_index=True, default=2)),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
            ],
            options={
                'db_table': 'project_albumphoto',
            },
        ),
        migrations.CreateModel(
            name='Area',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('name_et', models.CharField(max_length=255, null=True)),
                ('name_lv', models.CharField(max_length=255, null=True)),
                ('name_lt', models.CharField(max_length=255, null=True)),
                ('name_en', models.CharField(max_length=255, null=True)),
                ('name_ru', models.CharField(max_length=255, null=True)),
                ('name_fi', models.CharField(max_length=255, null=True)),
                ('name_sv', models.CharField(max_length=255, null=True)),
                ('name_nl', models.CharField(max_length=255, null=True)),
                ('name_de', models.CharField(max_length=255, null=True)),
                ('name_no', models.CharField(max_length=255, null=True)),
                ('lat', models.FloatField(null=True)),
                ('lon', models.FloatField(null=True)),
            ],
            options={
                'db_table': 'project_area',
            },
        ),
        migrations.CreateModel(
            name='Dating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('raw', models.CharField(blank=True, max_length=25, null=True)),
                ('comment', models.TextField(blank=True, null=True)),
                ('start', models.DateField(default=datetime.date(1000, 1, 1))),
                ('start_approximate', models.BooleanField(default=False)),
                ('start_accuracy',
                 models.PositiveSmallIntegerField(blank=True, choices=[(0, 'Day'), (1, 'Month'), (2, 'Year')],
                                                  null=True)),
                ('end', models.DateField(default=datetime.date(3000, 1, 1))),
                ('end_approximate', models.BooleanField(default=False)),
                ('end_accuracy',
                 models.PositiveSmallIntegerField(blank=True, choices=[(0, 'Day'), (1, 'Month'), (2, 'Year')],
                                                  null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'project_dating',
            },
        ),
        migrations.CreateModel(
            name='DatingConfirmation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'project_datingconfirmation',
            },
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('camera_make', models.CharField(blank=True, max_length=255, null=True)),
                ('camera_model', models.CharField(blank=True, max_length=255, null=True)),
                ('lens_make', models.CharField(blank=True, max_length=255, null=True)),
                ('lens_model', models.CharField(blank=True, max_length=255, null=True)),
                ('software', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'project_device',
            },
        ),
        migrations.CreateModel(
            name='DifficultyFeedback',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.PositiveSmallIntegerField()),
                ('trustworthiness', models.FloatField()),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'project_difficultyfeedback',
            },
        ),
        migrations.CreateModel(
            name='GeoTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lat', models.FloatField(validators=[django.core.validators.MinValueValidator(-85.05115),
                                                      django.core.validators.MaxValueValidator(85)])),
                ('lon', models.FloatField(validators=[django.core.validators.MinValueValidator(-180),
                                                      django.core.validators.MaxValueValidator(180)])),
                ('geography',
                 django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, null=True, srid=4326)),
                ('azimuth', models.FloatField(blank=True, null=True)),
                ('azimuth_line_end_lat', models.FloatField(blank=True, null=True)),
                ('azimuth_line_end_lon', models.FloatField(blank=True, null=True)),
                ('zoom_level', models.IntegerField(blank=True, null=True)),
                ('origin', models.PositiveSmallIntegerField(
                    choices=[(0, 'Game'), (1, 'Map view'), (2, 'Gallery'), (3, 'Permalink'), (4, 'Source'),
                             (5, 'Rephoto')], default=0)),
                ('type', models.PositiveSmallIntegerField(
                    choices=[(0, 'Map'), (1, 'EXIF'), (2, 'GPS'), (3, 'Confirmation'), (4, 'StreetView'),
                             (5, 'Source geotag'), (6, 'Android app')], default=0)),
                ('map_type', models.PositiveSmallIntegerField(
                    choices=[(0, 'Google map'), (1, 'Google satellite'), (2, 'OpenStreetMap'), (3, 'Juks'),
                             (4, 'No map')], default=0)),
                ('hint_used', models.BooleanField(default=False)),
                ('photo_flipped', models.BooleanField(default=False)),
                ('is_correct', models.BooleanField(default=False)),
                ('azimuth_correct', models.BooleanField(default=False)),
                ('score', models.IntegerField(blank=True, null=True)),
                ('azimuth_score', models.IntegerField(blank=True, null=True)),
                ('trustworthiness', models.FloatField()),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'project_geotag',
            },
        ),
        migrations.CreateModel(
            name='GoogleMapsReverseGeocode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lat', models.FloatField(db_index=True,
                                          validators=[django.core.validators.MinValueValidator(-85.05115),
                                                      django.core.validators.MaxValueValidator(85)])),
                ('lon', models.FloatField(db_index=True, validators=[django.core.validators.MinValueValidator(-180),
                                                                     django.core.validators.MaxValueValidator(180)])),
                ('response', django_extensions.db.fields.json.JSONField(default=dict)),
            ],
            options={
                'db_table': 'project_googlemapsreversegeocode',
            },
        ),
        migrations.CreateModel(
            name='ImageSimilarity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('confirmed', models.BooleanField()),
                ('similarity_type', models.PositiveSmallIntegerField(blank=True,
                                                                     choices=[(0, 'Different'), (1, 'Similar'),
                                                                              (2, 'Duplicate')], null=True)),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='ImageSimilaritySuggestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('similarity_type', models.PositiveSmallIntegerField(blank=True,
                                                                     choices=[(0, 'Different'), (1, 'Similar'),
                                                                              (2, 'Duplicate')], null=True)),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
            ],
        ),
        migrations.CreateModel(
            name='Licence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('name_et', models.CharField(max_length=255, null=True)),
                ('name_lv', models.CharField(max_length=255, null=True)),
                ('name_lt', models.CharField(max_length=255, null=True)),
                ('name_en', models.CharField(max_length=255, null=True)),
                ('name_ru', models.CharField(max_length=255, null=True)),
                ('name_fi', models.CharField(max_length=255, null=True)),
                ('name_sv', models.CharField(max_length=255, null=True)),
                ('name_nl', models.CharField(max_length=255, null=True)),
                ('name_de', models.CharField(max_length=255, null=True)),
                ('name_no', models.CharField(max_length=255, null=True)),
                ('url', models.URLField(blank=True, null=True)),
                ('image_url', models.URLField(blank=True, null=True)),
                ('is_public', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'project_licence',
            },
        ),
        migrations.CreateModel(
            name='MyXtdComment',
            fields=[
                ('xtdcomment_ptr',
                 models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True,
                                      primary_key=True, serialize=False, to='django_comments_xtd.XtdComment')),
                ('facebook_comment_id', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'comment',
                'verbose_name_plural': 'comments',
                'ordering': ('submit_date',),
                'permissions': [('can_moderate', 'Can moderate comments')],
                'abstract': False,
            },
            bases=('django_comments_xtd.xtdcomment',),
        ),
        migrations.CreateModel(
            name='Photo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image',
                 models.ImageField(blank=True, height_field='height', max_length=255, null=True, upload_to='uploads',
                                   verbose_name='Image', width_field='width')),
                ('image_unscaled', models.ImageField(blank=True, max_length=255, null=True, upload_to='uploads')),
                ('image_no_watermark', models.ImageField(blank=True, max_length=255, null=True, upload_to='uploads')),
                ('height', models.IntegerField(blank=True, null=True)),
                ('width', models.IntegerField(blank=True, null=True)),
                ('aspect_ratio', models.FloatField(blank=True, null=True)),
                ('flip', models.BooleanField(null=True)),
                ('invert', models.BooleanField(null=True)),
                ('stereo', models.BooleanField(null=True)),
                ('rotated', models.IntegerField(blank=True, null=True)),
                ('date', models.DateTimeField(blank=True, null=True)),
                ('date_text', models.CharField(blank=True, max_length=255, null=True)),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('title_et', models.CharField(blank=True, max_length=255, null=True)),
                ('title_lv', models.CharField(blank=True, max_length=255, null=True)),
                ('title_lt', models.CharField(blank=True, max_length=255, null=True)),
                ('title_en', models.CharField(blank=True, max_length=255, null=True)),
                ('title_ru', models.CharField(blank=True, max_length=255, null=True)),
                ('title_fi', models.CharField(blank=True, max_length=255, null=True)),
                ('title_sv', models.CharField(blank=True, max_length=255, null=True)),
                ('title_nl', models.CharField(blank=True, max_length=255, null=True)),
                ('title_de', models.CharField(blank=True, max_length=255, null=True)),
                ('title_no', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('description_et', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('description_lv', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('description_lt', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('description_ru', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('description_fi', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('description_sv', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('description_nl', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('description_de', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('description_no', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('author', models.CharField(blank=True, max_length=255, null=True, verbose_name='Author')),
                ('uploader_is_author', models.BooleanField(default=False)),
                ('types', models.CharField(blank=True, max_length=255, null=True)),
                ('keywords', models.TextField(blank=True, null=True)),
                ('level', models.PositiveSmallIntegerField(default=0)),
                ('suggestion_level', models.FloatField(default=3)),
                ('lat', models.FloatField(blank=True, db_index=True, null=True,
                                          validators=[django.core.validators.MinValueValidator(-85.05115),
                                                      django.core.validators.MaxValueValidator(85)])),
                ('lon', models.FloatField(blank=True, db_index=True, null=True,
                                          validators=[django.core.validators.MinValueValidator(-180),
                                                      django.core.validators.MaxValueValidator(180)])),
                ('geography',
                 django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, null=True, srid=4326)),
                ('bounding_circle_radius', models.FloatField(blank=True, null=True)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('azimuth', models.FloatField(blank=True, null=True)),
                ('confidence', models.FloatField(blank=True, default=0, null=True)),
                ('azimuth_confidence', models.FloatField(blank=True, default=0, null=True)),
                ('source_key', models.CharField(blank=True, max_length=100, null=True)),
                ('external_id', models.CharField(blank=True, max_length=100, null=True)),
                ('external_sub_id', models.CharField(blank=True, max_length=100, null=True)),
                ('source_url', models.URLField(blank=True, max_length=1023, null=True)),
                ('first_rephoto', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('latest_rephoto', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('fb_object_id', models.CharField(blank=True, max_length=255, null=True)),
                ('comment_count', models.IntegerField(blank=True, db_index=True, default=0, null=True)),
                ('first_comment', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('latest_comment', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('view_count', models.PositiveIntegerField(default=0)),
                ('first_view', models.DateTimeField(blank=True, null=True)),
                ('latest_view', models.DateTimeField(blank=True, null=True)),
                ('like_count', models.IntegerField(db_index=True, default=0)),
                ('first_like', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('latest_like', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('geotag_count', models.IntegerField(db_index=True, default=0)),
                ('first_geotag', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('latest_geotag', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('dating_count', models.IntegerField(db_index=True, default=0)),
                ('first_dating', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('latest_dating', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('transcription_count', models.IntegerField(db_index=True, default=0)),
                ('first_transcription', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('latest_transcription', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('annotation_count', models.IntegerField(db_index=True, default=0)),
                ('first_annotation', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('latest_annotation', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('gps_accuracy', models.FloatField(blank=True, null=True)),
                ('gps_fix_age', models.FloatField(blank=True, null=True)),
                ('cam_scale_factor', models.FloatField(blank=True, null=True,
                                                       validators=[django.core.validators.MinValueValidator(0.5),
                                                                   django.core.validators.MaxValueValidator(4.0)])),
                ('cam_yaw', models.FloatField(blank=True, null=True)),
                ('cam_pitch', models.FloatField(blank=True, null=True)),
                ('cam_roll', models.FloatField(blank=True, null=True)),
                ('video_timestamp', models.IntegerField(blank=True, null=True)),
                ('face_detection_attempted_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('perceptual_hash', models.BigIntegerField(blank=True, null=True)),
                ('has_similar', models.BooleanField(default=False)),
                ('scene',
                 models.PositiveSmallIntegerField(blank=True, choices=[(0, 'Interior'), (1, 'Exterior')], null=True,
                                                  verbose_name='Scene')),
                ('viewpoint_elevation',
                 models.PositiveSmallIntegerField(blank=True, choices=[(0, 'Ground'), (1, 'Raised'), (2, 'Aerial')],
                                                  null=True, verbose_name='Viewpoint elevation')),
            ],
            options={
                'db_table': 'project_photo',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='PhotoComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fb_comment_id', models.CharField(max_length=255, unique=True)),
                ('fb_object_id', models.CharField(max_length=255)),
                ('fb_comment_parent_id', models.CharField(blank=True, max_length=255, null=True)),
                ('fb_user_id', models.CharField(max_length=255)),
                ('text', models.TextField()),
                ('created', models.DateTimeField()),
            ],
            options={
                'db_table': 'project_photocomment',
            },
        ),
        migrations.CreateModel(
            name='PhotoFlipSuggestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('flip', models.BooleanField(null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PhotoInvertSuggestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('invert', models.BooleanField(null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PhotoLike',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.PositiveSmallIntegerField(default=1)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='PhotoMetadataUpdate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('old_title', models.CharField(blank=True, max_length=255, null=True)),
                ('new_title', models.CharField(blank=True, max_length=255, null=True)),
                ('old_description', models.TextField(blank=True, null=True)),
                ('new_description', models.TextField(blank=True, null=True)),
                ('old_author', models.CharField(blank=True, max_length=255, null=True)),
                ('new_author', models.CharField(blank=True, max_length=255, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'project_photometadataupdate',
            },
        ),
        migrations.CreateModel(
            name='PhotoRotationSuggestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('rotated', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PhotoSceneSuggestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('scene',
                 models.PositiveSmallIntegerField(blank=True, choices=[(0, 'Interior'), (1, 'Exterior')], null=True,
                                                  verbose_name='Scene')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PhotoViewpointElevationSuggestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('viewpoint_elevation',
                 models.PositiveSmallIntegerField(blank=True, choices=[(0, 'Ground'), (1, 'Raised'), (2, 'Aerial')],
                                                  null=True, verbose_name='Viewpoint elevation')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('user',
                 models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False,
                                      to=settings.AUTH_USER_MODEL)),
                ('display_name', models.CharField(blank=True, max_length=255, null=True)),
                ('first_name', models.CharField(blank=True, max_length=255, null=True)),
                ('last_name', models.CharField(blank=True, max_length=255, null=True)),
                ('fb_name', models.CharField(blank=True, max_length=255, null=True)),
                ('fb_link', models.CharField(blank=True, max_length=255, null=True)),
                ('fb_id', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('fb_token', models.CharField(blank=True, max_length=511, null=True)),
                ('fb_hometown', models.CharField(blank=True, max_length=511, null=True)),
                ('fb_current_location', models.CharField(blank=True, max_length=511, null=True)),
                ('fb_birthday', models.DateField(blank=True, null=True)),
                ('fb_email', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('fb_user_friends', models.TextField(blank=True, null=True)),
                ('google_plus_id', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('google_plus_email', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('google_plus_link', models.CharField(blank=True, max_length=255, null=True)),
                ('google_plus_name', models.CharField(blank=True, max_length=255, null=True)),
                ('google_plus_token', models.TextField(blank=True, null=True)),
                ('google_plus_picture', models.CharField(blank=True, max_length=255, null=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('deletion_attempted', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('score', models.PositiveIntegerField(db_index=True, default=0)),
                ('score_rephoto', models.PositiveIntegerField(db_index=True, default=0)),
                ('score_recent_activity', models.PositiveIntegerField(db_index=True, default=0)),
                ('newsletter_consent', models.BooleanField(null=True)),
                ('preferred_language', models.CharField(blank=True, max_length=8, null=True)),
                ('wikimedia_commons_rephoto_upload_consent', models.BooleanField(null=True)),
            ],
            options={
                'db_table': 'project_profile',
            },
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'project_source',
            },
        ),
        migrations.CreateModel(
            name='Transcription',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(blank=True, max_length=5000, null=True)),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('photo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transcriptions',
                                            to='ajapaik.Photo')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transcriptions',
                                           to='ajapaik.Profile')),
            ],
        ),
        migrations.CreateModel(
            name='WikimediaCommonsUpload',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('response_code', models.IntegerField(editable=False, null=True)),
                ('response_data', models.TextField(editable=False, null=True)),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('url', models.URLField(blank=True, max_length=1023, null=True)),
                ('photo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ajapaik.Photo')),
            ],
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('slug', models.SlugField(blank=True, max_length=255, null=True, unique=True)),
                ('file', models.FileField(blank=True, null=True, upload_to='videos')),
                ('width', models.IntegerField()),
                ('height', models.IntegerField()),
                ('author', models.CharField(blank=True, max_length=255, null=True)),
                ('date', models.DateField(blank=True, null=True)),
                ('source_key', models.CharField(blank=True, max_length=255, null=True)),
                ('source_url', models.URLField(blank=True, null=True)),
                ('cover_image',
                 models.ImageField(blank=True, height_field='cover_image_height', null=True, upload_to='videos/covers',
                                   width_field='cover_image_width')),
                ('cover_image_height', models.IntegerField(blank=True, null=True)),
                ('cover_image_width', models.IntegerField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('source', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                             to='ajapaik.Source')),
            ],
            options={
                'db_table': 'project_video',
            },
        ),
        migrations.CreateModel(
            name='TranscriptionFeedback',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('transcription',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transcription',
                                   to='ajapaik.Transcription')),
                ('user',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transcription_feedback',
                                   to='ajapaik.Profile')),
            ],
        ),
        migrations.CreateModel(
            name='Skip',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('photo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ajapaik.Photo')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='skips',
                                           to='ajapaik.Profile')),
            ],
            options={
                'db_table': 'project_skip',
            },
        ),
        migrations.CreateModel(
            name='ProfileMergeToken',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=36)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('used', models.DateTimeField(blank=True, null=True)),
                ('profile',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='profile_merge_tokens',
                                   to='ajapaik.Profile')),
                ('source_profile', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                                     related_name='merged_from_profile', to='ajapaik.Profile')),
                ('target_profile', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                                     related_name='merged_into_profile', to='ajapaik.Profile')),
            ],
        ),
        migrations.CreateModel(
            name='ProfileDisplayNameChange',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display_name', models.CharField(blank=True, max_length=255, null=True)),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('profile',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='display_name_changes',
                                   to='ajapaik.Profile')),
            ],
        ),
        migrations.CreateModel(
            name='Points',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.PositiveSmallIntegerField(
                    choices=[(0, 'Geotag'), (1, 'Rephoto'), (2, 'Photo upload'), (3, 'Photo curation'),
                             (4, 'Photo re-curation'), (5, 'Dating'), (6, 'Dating confirmation'), (7, 'Film still'),
                             (8, 'Annotation'), (9, 'Confirm subject'), (10, 'Confirm Image similarity'),
                             (11, 'Suggestion subject age'), (12, 'Suggestion subject age'), (13, 'Transcribe'),
                             (14, 'Categorize scene'), (15, 'Add viewpoint elevation'), (16, 'Flip photo'),
                             (18, 'Invert photo'), (17, 'Rotate photo')], db_index=True)),
                ('points', models.IntegerField(default=0)),
                ('created', models.DateTimeField(db_index=True)),
                ('album', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                            to='ajapaik.Album')),
            ],
            options={
                'verbose_name_plural': 'Points',
                'db_table': 'project_points',
            },
        ),
    ]
